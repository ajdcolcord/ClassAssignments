/** a class for defining simple mathematical functions
 * 
 * @author Austin Colcord - ajdcolcord
 *
 */
public class Algorithms {

	/** compute the location of the car
	 * 
	 * @param startLoc the starting location of the car
	 * @param speed the speed that the car will move
	 * @param timeElapsed the time of the clock
	 * @return int the new position of the car
	 */
	static int carMove(int startLoc, int speed, int timeElapsed) {
		return startLoc + speed * timeElapsed;
	}

	/** compute the height of the rocket after one tick of the clock
	 * 
	 * @param startLoc the starting location of the rocket
	 * @param speed the speed at which the rocket will move per tick
	 * @return int the new position of the rocket after one tick
	 */
	static int nextRocket(int startLoc, int speed) {
		if (speed - startLoc >= 0) {
			return 0;
		}
		else {
			return startLoc - speed; 
		}
	}

	/** compute the area of a circle, given its radius
	 * 
	 * @param rad the radius of the circle
	 * @return double the area of the circle
	 */
	static double circleArea(int rad) {
		return Math.PI * rad * rad;
	}

	/** compute the perimeter of a circle, given its radius
	 * 
	 * @param rad the radius of the circle
	 * @return double the perimeter of the circle
	 */
	static double circlePerimeter(int rad) {
		return Math.PI * 2 * rad;
	}

}
