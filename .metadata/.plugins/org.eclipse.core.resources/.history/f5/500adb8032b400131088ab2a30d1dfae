import junit.framework.TestCase;

/** represents the JUnit tests for ILoS and all subclasses
 * 
 * @author Austin Colcord - ajdcolcord
 *
 */
public class StringListTest extends TestCase {
    String bee = "bee";
    String cee = "cee";
    String empty = "";
    
    
    ILoS emptylist = new MtLoS();
    
    ILoS meow = new ConsLoS("meow!", this.emptylist);
    ILoS goes = new ConsLoS("goes ", this.meow);
    ILoS cat = new ConsLoS("Cat ", this.goes);
    
    ILoS lamb = new ConsLoS("lamb.", this.emptylist);
    ILoS little = new ConsLoS("little ", this.lamb);
    ILoS a = new ConsLoS("a ", this.little);
    ILoS had = new ConsLoS("had ", this.a);
    ILoS mary = new ConsLoS("Mary ", this.had);
    
    ILoS lista = new ConsLoS("Cat ",
            new ConsLoS("goes ", 
                    new ConsLoS("lamb.", 
                            new ConsLoS("meow!", this.emptylist))));
  
    //Combine Examples
    boolean testCombine(Tester t) {
        return t.checkExpect(this.mary.combine(), "Mary had a little lamb.") &&
               t.checkExpect(this.cat.combine(), "Cat goes meow!");
    }
    
    //CompareAlph Examples
    boolean testCompareAlph(Tester t) {
        return t.checkExpect(this.mary.compareAlph(this.bee), false) && 
               t.checkExpect(this.cat.compareAlph(this.cee), true) &&
               t.checkExpect(this.emptylist.compareAlph(""), true) &&
               t.checkExpect(this.meow.compareAlph(""), true);
    }
    
    //FirstList Examples
    boolean testFirstList(Tester t) {
        return t.checkExpect(this.cat.firstList(), "Cat ") &&
               t.checkExpect(this.emptylist.firstList(), "") &&
               t.checkExpect(this.meow.firstList(), "meow!");
    }
    
    //RestList Examples
    boolean testRestList(Tester t) {
        return t.checkExpect(this.emptylist.restList(), this.emptylist) &&
               t.checkExpect(this.lamb.restList(), this.emptylist) &&
               t.checkExpect(this.a.restList(), this.little);
    }
    
    //IsSorted Examples
    boolean testIsSorted(Tester t) {
        return  t.checkExpect(this.cat.isSorted(), true) &&
                t.checkExpect(this.little.isSorted(), false) &&
                t.checkExpect(this.mary.isSorted(), false) &&
                t.checkExpect(this.emptylist.isSorted(), true) &&
                t.checkExpect(this.meow.isSorted(), true);
    }
    
    //TestMerge Examples
    boolean testMerge(Tester t) {
        return t.checkExpect(this.cat.merge(this.emptylist), this.cat) &&
                t.checkExpect(this.cat.merge(this.lamb), this.lista);
    }
}
